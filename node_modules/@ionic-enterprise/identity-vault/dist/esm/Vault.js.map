{"version":3,"file":"Vault.js","sourceRoot":"","sources":["../../src/Vault.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AndroidBiometricCryptoPreference,\n  DeviceSecurityType,\n  VaultError,\n  VaultErrorCodes,\n  VaultType,\n} from \"./definitions\";\nimport { IdentityVaultConfig } from \"./IdentityVaultConfig\";\nimport { VaultInterface } from \"./VaultInterface\";\n\n/**\n * Represents a vault for secure value storage\n */\nexport class Vault implements VaultInterface {\n  /** @ignore */\n  private passCodeRequestedCallback?: (\n    isPasscodeSetRequest: boolean\n  ) => Promise<void>;\n\n  /** @ignore */\n  private defaultConfig = {\n    deviceSecurityType: DeviceSecurityType.None,\n    androidBiometricsPreferStrongVaultOrSystemPasscode:\n      AndroidBiometricCryptoPreference.StrongVault,\n    shouldClearVaultAfterTooManyFailedAttempts: false,\n    customPasscodeInvalidUnlockAttempts: 5,\n    unlockVaultOnLoad: false,\n  };\n\n  /** @ignore */\n  config: IdentityVaultConfig;\n\n  /**\n   * @usage\n   * ```typescript\n   * const vault = new Vault({\n   *  key: 'com.company.myvaultapp',\n   *  type: 'CustomPasscode',\n   *  deviceSecurityType: DeviceSecurityType.None,\n   *  lockAfterBackgrounded: 2000,\n   * });\n   * ```\n   * @param config\n   */\n  constructor(config: IdentityVaultConfig) {\n    // set defaults\n    this.config = Object.assign(this.defaultConfig, config);\n\n    // setting sane defaults\n    if (\n      config.deviceSecurityType === DeviceSecurityType.None &&\n      config.type === VaultType.DeviceSecurity\n    ) {\n      config.deviceSecurityType = DeviceSecurityType.Both;\n    }\n\n    this.resume = this.resume.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.setup().then(() => {\n      this.getPersistedVaultConfig();\n    });\n  }\n\n  /**\n   * Resolves true if a vault with the same key already exists, and false if not.\n   * The vault does not need to be unlocked to check.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const vaultExists = await vault.doesVaultExists()\n   * if (!vaultExists) {\n   *  // the vault does not exist...\n   * }\n   * ```\n   */\n  doesVaultExist(): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      cordova.exec(\n        (data) => {\n          resolve(JSON.parse(data));\n        },\n        (error) => {\n          this.handleError(resolve, reject, error, () => this.doesVaultExist());\n        },\n        \"VaultPlugin\",\n        \"doesVaultExist\",\n        [this.config]\n      );\n    });\n  }\n\n  /**\n   * Clears out the current vault and removes it from the system.\n   * Note: The vault does not need to be unlocked in order to clear it. No credentials are checked\n   * when clearing the vault.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * await vault.clear();\n   * ```\n   */\n  clear(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      cordova.exec(\n        (data) => {\n          resolve();\n        },\n        (error) => {\n          this.handleError(resolve, reject, error, () => this.clear());\n        },\n        \"VaultPlugin\",\n        \"clear\",\n        [this.config]\n      );\n    });\n  }\n\n  /**\n   * Exports the data of the current vault in its entirety.\n   * The data is a map with keys that are strings and values that are JSON.\n   * Calling `exportVault` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const data = await vault.exportVault();\n   * ```\n   *\n   * @return The resolved object is a map with string keys and string values.\n   *\n   */\n  exportVault(): Promise<{ [key: string]: string }> {\n    return new Promise<{ [key: string]: string }>((resolve, reject) => {\n      cordova.exec(\n        (data) => {\n          resolve(JSON.parse(data));\n        },\n        (error) => {\n          this.handleError(resolve, reject, error, () => this.exportVault());\n        },\n        \"VaultPlugin\",\n        \"exportVault\",\n        [this.config]\n      );\n    });\n  }\n\n  /**\n   * Imports data into the vault, replacing the current contents of the vault.\n   * The data is a map with keys that are strings and values that are JSON.\n   * Calling `importVault` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const dataFromElsewhere = await getUserData();\n   * const newVault = new Vault(vaultConfig);\n   * await newVault.importVault(dataFromElsewhere);\n   * ```\n   *\n   * @param data The entire data object to be imported. The shape of data must be {[key: string]: string}.\n   *\n   */\n  importVault(data: { [key: string]: string }): Promise<void> {\n    const jsonData = JSON.stringify(data);\n    return new Promise<void>((resolve, reject) => {\n      cordova.exec(\n        resolve,\n        (error) => {\n          this.handleError(resolve, reject, error, () =>\n            this.importVault(data)\n          );\n        },\n        \"VaultPlugin\",\n        \"importVault\",\n        [this.config, jsonData]\n      );\n    });\n  }\n\n  /**\n   * Checks if the vault is currently in a locked state, which signifies that the contents\n   * of the secure vault are not currently accessible. `isLocked` can also return true if the\n   * vault does not exist.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const locked = await vault.isLocked();\n   * if (locked) {\n   *  // vault is locked (or does not exist);\n   * }\n   * ```\n   */\n  isLocked(): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      cordova.exec(\n        (data) => {\n          resolve(JSON.parse(data));\n        },\n        (error) => {\n          this.handleError(resolve, reject, error);\n        },\n        \"VaultPlugin\",\n        \"isLocked\",\n        [this.config]\n      );\n    });\n  }\n\n  /**\n   * Returns an array of keys that are currently in the vault.\n   * Calling `getKeys` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const allKeys = await vault.getKeys();\n   * allKeys.forEach((key) => {\n   *  // do something with the key\n   * });\n   * ```\n   */\n  getKeys(): Promise<string[]> {\n    return new Promise<string[]>((resolve, reject) => {\n      cordova.exec(\n        (data) => {\n          resolve(JSON.parse(data));\n        },\n        (error) => {\n          this.handleError(resolve, reject, error, () => this.getKeys());\n        },\n        \"VaultPlugin\",\n        \"getKeys\",\n        [this.config]\n      );\n    });\n  }\n\n  /**\n   * Gets the value for a given key. Returns null if the key does not exist.\n   * Calling `getValue` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const userFirstName = await vault.getValue<string>(\"firstname\");\n   * ```\n   *\n   * @param key The key to look up the value for\n   *\n   */\n  getValue<T = any>(key: string): Promise<T | null> {\n    return new Promise<T | null>((resolve, reject) => {\n      cordova.exec(\n        (data: string | null) => {\n          if (!data) {\n            // android returns null as an empty string, so manually convert it here\n            resolve(null);\n          } else {\n            try {\n              resolve(JSON.parse(data));\n            } catch (err) {\n              resolve(data as any);\n            }            \n          }\n        },\n        (error) => {\n          this.handleError(resolve, reject, error, () => this.getValue(key));\n        },\n        \"VaultPlugin\",\n        \"getValue\",\n        [this.config, key]\n      );\n    });\n  }\n\n  /**\n   * Locks the vault if it is currently unlocked.\n   * Locking the vault with remove all secure data from memory inside of Identity Vault, but not your application.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * await vault.lock();\n   * ```\n   */\n  lock(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      cordova.exec(\n        (data) => {\n          resolve();\n        },\n        (error) => {\n          this.handleError(resolve, reject, error);\n        },\n        \"VaultPlugin\",\n        \"lock\",\n        [this.config]\n      );\n    });\n  }\n\n  /**\n   * Removes a value from the vault.\n   * Calling `removeValue` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * await vault.removeValue(\"address\");\n   * ```\n   *\n   * @param key The key to remove\n   *\n   */\n  removeValue(key: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      cordova.exec(\n        resolve,\n        (error) => {\n          this.handleError(resolve, reject, error, () => this.removeValue(key));\n        },\n        \"VaultPlugin\",\n        \"removeValue\",\n        [this.config, key]\n      );\n    });\n  }\n\n  /**\n   * When the vault type is set to 'CustomPasscode', this method sets the passcode required to\n   * secure the vault.\n   * This method is typically called in the `onPasscodeRequested` callback.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * const code = window.prompt(\"Enter your passcode.\");\n   * if (code) {\n   *  await vault.setCustomPasscode(code);\n   * }\n   * ```\n   *\n   * @param passcode The user supplied passcode to secure the vault with.\n   *\n   */\n  setCustomPasscode(passcode: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      cordova.exec(\n        resolve,\n        (error) => {\n          this.handleError(resolve, reject, error);\n        },\n        \"VaultPlugin\",\n        \"setCustomPasscode\",\n        [this.config, passcode]\n      );\n    });\n  }\n\n  /**\n   * Sets the value of an item in the vault.\n   * Calling `setValue` will attempt to unlock the vault if it is currently locked.\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * await vault.setValue<string>(\"theme\", theme);\n   * ```\n   *\n   * @param key The key for the new value.\n   * @param value The value to store in the vault. Value can be of any type, as it will be parsed to JSON in the vault.\n   *\n   */\n  setValue<T = any>(key: string, value: T): Promise<void> {\n    const jsonValue = JSON.stringify(value);\n    return new Promise<void>((resolve, reject) => {\n      cordova.exec(\n        resolve,\n        (error) => {\n          this.handleError(resolve, reject, error, () =>\n            this.setValue(key, value)\n          );\n        },\n        \"VaultPlugin\",\n        \"setValue\",\n        [this.config, key, jsonValue]\n      );\n    });\n  }\n\n  /**\n   * Triggers when a config change occurs.\n   *\n   * @usage\n   * ```typescript\n   * vault.onConfigChanged((config) => {\n   *  console.log(\"updated config: \", config);\n   * });\n   * ```\n   * @param callback The callback function that will be called when the event triggers. Passes in the current vault config.\n   *\n   */\n  onConfigChanged(callback: (config: IdentityVaultConfig) => void) {\n    cordova.exec(\n      (data) => {\n        callback(JSON.parse(data));\n      },\n      (error) => console.error(error),\n      \"VaultPlugin\",\n      \"onConfigChanged\",\n      []\n    );\n  }\n\n  /**\n   * Triggers when an error occurs in the application.\n   * Errors that come back as rejected promises also trigger this event.\n   *\n   * @usage\n   * ```typescript\n   * vault.onError((err) => {\n   *  console.log('ERROR from callback', JSON.stringify(err));\n   * });\n   * ```\n   *\n   * @param callback The callback function that will be called when the event triggers. Passes in the error object.\n   *\n   */\n  onError(callback: (err: VaultError) => void) {\n    cordova.exec(() => {}, callback, \"VaultPlugin\", \"onError\", []);\n  }\n\n  /**\n   * Triggers when the vault enters a locked state.\n   *\n   * @usage\n   * ```typescript\n   * vault.onLock(() => { displayNotification(\"Vault locked.\"); })\n   * ```\n   *\n   * @param callback The callback function that will be called when the event triggers.\n   *\n   */\n  onLock(callback: () => void) {\n    cordova.exec(\n      callback,\n      (error) => console.error(error),\n      \"VaultPlugin\",\n      \"onLock\",\n      [this.config]\n    );\n  }\n\n  /**\n   * For CustomPasscode vaults, this event triggers when the vault is attempting to unlock\n   * and the passcode has not been set yet. The callback function will pass in a Promise that,\n   * when resolved, with attempt to unlock the vault again calling the same method that originally\n   * tried to unlock the vault. Before the promise is resolved, you should prompt the user to supply a passcode, and\n   * then supply that value to `setCustomPasscode`.\n   *\n   * @usage\n   * ```typescript\n   * vault.onPasscodeRequested(async (isPasscodeSetRequest) => {\n   *  const message = isPasscodeSetRequest\n   *    ? 'Setup Passcode' // passcode is being set for first time\n   *    : 'Enter passcode'; // passcode is being asked for unlock\n   *  const passcode = window.prompt(message) || '';\n   *   vault.setCustomPasscode(passcode);\n   *   return Promise.resolve();\n   * });\n   * ```\n   *\n   * @param callback The callback function that will be called when the event triggers. The function returns a promise with a boolean that indicates if the passcode is being setup for the first time for the vault or not.\n   *\n   */\n  onPasscodeRequested(\n    callback: (isPasscodeSetRequest: boolean) => Promise<void>\n  ) {\n    this.passCodeRequestedCallback = callback;\n  }\n\n  /**\n   * Triggers when the vault enters an unlocked state.\n   *\n   * @usage\n   * ```typescript\n   * vault.onUnlock(() => {\n   *  console.log(\"vault is now unlocked\");\n   * });\n   * ```\n   * @param callback The callback function that will be called when the event triggers.\n   *\n   */\n  onUnlock(callback: () => void) {\n    cordova.exec(\n      callback,\n      (error) => console.error(error),\n      \"VaultPlugin\",\n      \"onUnlock\",\n      [this.config]\n    );\n  }\n\n  /**\n   * Manually unlock the vault. Will trigger any authentication mechanism needed to access the vault (passcode, biometrics, etc..).\n   *\n   * @usage\n   * ```typescript\n   * const vault = new Vault(existingVaultConfig);\n   * await vault.unlock();\n   * ```\n   */\n  unlock(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      cordova.exec(\n        () => {\n          resolve();\n        },\n        (error) => {\n          this.handleError(resolve, reject, error, () => this.unlock());\n        },\n        \"VaultPlugin\",\n        \"unlock\",\n        [this.config]\n      );\n    });\n  }\n\n  /**\n   * Updates the configuration of the current vault.\n   *\n   *  @usage\n   * ```typescript\n   * async function changeVaultType(type: VaultType) {\n   *  const vault = new Vault(this.existingVaultConfig);\n   *  const newConfig = { ...this.existingVaultConfig, type };\n   *  await vault.updateConfig(newConfig);\n   *  this.existingVaultConfig = newConfig;\n   * }\n   * ```\n   *\n   * @param config The new config\n   *\n   */\n  updateConfig(config: IdentityVaultConfig): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      config = Object.assign(this.defaultConfig, config);\n\n      // setting sane defaults\n      if (\n        config.deviceSecurityType === DeviceSecurityType.None &&\n        config.type === VaultType.DeviceSecurity\n      ) {\n        config.deviceSecurityType = DeviceSecurityType.Both;\n      }\n\n      cordova.exec(\n        () => {\n          this.config = config;\n          resolve();\n        },\n        (error) => {\n          this.handleError(resolve, reject, error, () =>\n            this.updateConfig(config)\n          );\n        },\n        \"VaultPlugin\",\n        \"updateConfig\",\n        [config]\n      );\n    });\n  }\n\n  /** @ignore */\n  private async handleError(\n    resolve: (data: any) => void,\n    reject: (error: any) => void,\n    error: any,\n    retryFunc?: any\n  ) {\n    if (\n      error.code === VaultErrorCodes.MissingPasscode &&\n      this.passCodeRequestedCallback\n    ) {\n      await this.passCodeRequestedCallback(error.extra.isPasscodeSetRequest);\n      if (retryFunc) {\n        try {\n          const data = await retryFunc();\n          resolve(data);\n        } catch (e) {\n          reject(e);\n        }\n      }\n    } else if (error.code === VaultErrorCodes.MissingBiometrics) {\n      cordova.exec(\n        async () => {\n          const data = await retryFunc();\n          resolve(data);\n        },\n        (e) => reject(e),\n        \"VaultPlugin\",\n        \"requestBiometricPrompt\",\n        [this.config]\n      );\n    } else {\n      reject(error);\n    }\n  }\n\n  /** @ignore */\n  requestBiometricPrompt() {\n    return new Promise<boolean>((resolve, reject) => {\n      cordova.exec(\n        (data) => {\n          resolve(JSON.parse(data));\n        },\n        (error) => {\n          this.handleError(resolve, reject, error, () =>\n            this.requestBiometricPrompt()\n          );\n        },\n        \"VaultPlugin\",\n        \"requestBiometricPrompt\",\n        [this.config]\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  private resume() {\n    const noop = () => {};\n    cordova.exec(\n      noop,\n      (error) => {\n        this.handleError(noop, noop, error, () => this.resume());\n      },\n      \"VaultPlugin\",\n      \"appResumed\",\n      [this.config]\n    );\n  }\n\n  /**\n   * @ignore\n   */\n  private setup() {\n    return new Promise((resolve, reject) => {\n      document.addEventListener(\"resume\", this.resume, false);\n      cordova.exec(\n        resolve,\n        (error) => {\n          this.handleError(resolve, reject, error);\n        },\n        \"VaultPlugin\",\n        \"setup\",\n        [this.config]\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  private getPersistedVaultConfig() {\n    return new Promise<void>((resolve, reject) => {\n      cordova.exec(\n        (data: string | null) => {\n          if (!data) {\n            resolve();\n          } else {\n            const vaultConfig = JSON.parse(data) as IdentityVaultConfig;\n            this.config = Object.assign(this.config, vaultConfig);\n            resolve();\n          }\n        },\n        (error) => {\n          this.handleError(resolve, reject, error);\n        },\n        \"VaultPlugin\",\n        \"getVaultConfig\",\n        [this.config]\n      );\n    });\n  }\n}\n"]}