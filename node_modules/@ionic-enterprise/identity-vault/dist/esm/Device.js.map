{"version":3,"file":"Device.js","sourceRoot":"","sources":["../../src/Device.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BiometricSecurityStrength,\n  SupportedBiometricType,\n} from \"./definitions\";\n\nexport class Device {\n  /** @ignore */\n\n  constructor() {}\n  /**\n   * Gets the types of biometrics the device supports.\n   *\n   * @usage\n   * ```typescript\n   * const hardware = await Device.getAvailableHardware();\n   * hardware.forEach((biometricType) => console.log(\"Type: \" + biometricType));\n   * ```\n   */\n  public static getAvailableHardware(): Promise<SupportedBiometricType[]> {\n    return new Promise<SupportedBiometricType[]>((resolve, reject) => {\n      if (!(\"cordova\" in window)) {\n        resolve([]);\n        return;\n      }\n\n      cordova.exec(\n        (data) => {\n          resolve(data);\n        },\n        (error) => {\n          Device.handleError(resolve, reject, error);\n        },\n        \"DevicePlugin\",\n        \"getAvailableHardware\",\n        []\n      );\n    });\n  }\n\n  /**\n   * Check whether biometrics are locked out on the device.\n   * \n   * On Android, the locked out state will only known after an attempted biometric unlock.\n   *\n   * @usage\n   * ```typescript\n   * const isLockedOut = await Device.isLockedOutOfBiometrics();\n   * if (isLockedOut) {\n   *  // device is locked out ...\n   * }\n   * ```\n   */\n  public static isLockedOutOfBiometrics(): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      if (!(\"cordova\" in window)) {\n        resolve(false);\n        return;\n      }\n\n      cordova.exec(\n        (data) => {\n          resolve(JSON.parse(data));\n        },\n        (error) => {\n          Device.handleError(resolve, reject, error);\n        },\n        \"DevicePlugin\",\n        \"isLockedOutOfBiometrics\",\n        []\n      );\n    });\n  }\n\n  /**\n   * Checks the device biometric strength level.\n   *\n   * On iOS this will always return 'strong'.\n   *\n   * @usage\n   * ```typescript\n   * const biometricStrength = await Device.getBiometricStrengthLevel();\n   * ```\n   */\n  public static getBiometricStrengthLevel(): Promise<BiometricSecurityStrength> {\n    return new Promise<BiometricSecurityStrength>((resolve, reject) => {\n      if (!(\"cordova\" in window)) {\n        resolve(BiometricSecurityStrength.Weak);\n        return;\n      }\n      cordova.exec(\n        (data) => {\n          resolve(data);\n        },\n        (error) => {\n          Device.handleError(resolve, reject, error);\n        },\n        \"DevicePlugin\",\n        \"getBiometricStrengthLevel\",\n        []\n      );\n    });\n  }\n\n  /**\n   * Check whether or not the screen will be obscured in app switcher mode.\n   *\n   * @usage\n   * ```typescript\n   * const willHideScreen = await Device.isHideScreenOnBackgroundEnabled();\n   * ```\n   */\n  public static isHideScreenOnBackgroundEnabled(): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      if (!(\"cordova\" in window)) {\n        resolve(false);\n        return;\n      }\n      cordova.exec(\n        (data) => {\n          resolve(JSON.parse(data));\n        },\n        (error) => {\n          Device.handleError(resolve, reject, error);\n        },\n        \"DevicePlugin\",\n        \"isHideScreenOnBackgroundEnabled\",\n        []\n      );\n    });\n  }\n\n  /**\n   * Set whether or not the screen will be obscured in app switcher mode\n   *\n   * @usage\n   * ```typescript\n   * await Device.setHideScreenOnBackground(true);\n   * ```\n   */\n  public static setHideScreenOnBackground(enabled: boolean): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (!(\"cordova\" in window)) {\n        resolve();\n        return;\n      }\n      cordova.exec(\n        () => {\n          resolve();\n        },\n        (error) => {\n          Device.handleError(resolve, reject, error);\n        },\n        \"DevicePlugin\",\n        \"setHideScreenOnBackground\",\n        [enabled]\n      );\n    });\n  }\n\n  /**\n   * Check whether the device OS-level passcode has been set.\n   *\n   * @usage\n   * ```typescript\n   * const hasSystemPasscode = await Device.isSystemPasscodeSet();\n   * if (hasSystemPasscode) {\n   *  // device has a system passcode\n   * }\n   * ```\n   */\n  public static isSystemPasscodeSet(): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      if (!(\"cordova\" in window)) {\n        resolve(false);\n        return;\n      }\n      cordova.exec(\n        (data) => {\n          resolve(JSON.parse(data));\n        },\n        (error) => {\n          Device.handleError(resolve, reject, error);\n        },\n        \"DevicePlugin\",\n        \"isSystemPasscodeSet\",\n        []\n      );\n    });\n  }\n\n  /**\n   * Check whether or not biometrics is supported by the device and has been configured by the current user of the device.\n   *\n   * @usage\n   * ```typescript\n   * const biometricsEnabled = await Device.isBiometricsEnabled();\n   * if (!biometricsEnabled) {\n   *  // biometrics not enabled on this device...\n   * }\n   * ```\n   */\n  public static isBiometricsEnabled(): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      if (!(\"cordova\" in window)) {\n        resolve(false);\n        return;\n      }\n\n      cordova.exec(\n        (data) => {\n          console.log(\"biometrics is enabled: \", data);\n          resolve(JSON.parse(data));\n        },\n        (error) => {\n          Device.handleError(resolve, reject, error);\n        },\n        \"DevicePlugin\",\n        \"isBiometricsEnabled\",\n        []\n      );\n    });\n  }\n\n  /**\n   * Check whether or not biometrics is supported by the device.\n   *\n   * @usage\n   * ```typescript\n   * const biometricsSupported = await Device.isBiometricsSupported();\n   * if (biometricsSupported) {\n   *   // biometrics is supported on this device...\n   * }\n   * ```\n   */\n  public static isBiometricsSupported(): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      if (!(\"cordova\" in window)) {\n        resolve(false);\n        return;\n      }\n\n      cordova.exec(\n        (data) => {\n          resolve(JSON.parse(data));\n        },\n        (error) => {\n          Device.handleError(resolve, reject, error);\n        },\n        \"DevicePlugin\",\n        \"isBiometricsSupported\",\n        []\n      );\n    });\n  }\n\n  /**\n   * Check if the device has a secure hardware enclave.\n   * \n   * @usage\n   * ```typescript\n   * const hasSecureHardware = await Device.hasSecureHardware();\n   * if (!hasSecureHardware) {\n   *    // this device doesn't have secure hardware\n   * }\n   * ```\n   */\n  public static hasSecureHardware(): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      if (!(\"cordova\" in window)) {\n        resolve(false);\n        return;\n      }\n\n      cordova.exec(\n        (data) => {\n          resolve(JSON.parse(data));\n        },\n        (error) => {\n          Device.handleError(resolve, reject, error);\n        },\n        \"DevicePlugin\",\n        \"hasSecureHardware\",\n        []\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  private static async handleError(\n    resolve: (data: any) => void,\n    reject: (error: any) => void,\n    error: any,\n    retryFunc?: any\n  ) {\n    reject(error);\n  }\n}\n"]}