package com.ionicframework.IdentityVault;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Build;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import org.json.JSONException;

import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import javax.crypto.Cipher;

@RequiresApi(api = Build.VERSION_CODES.M)
public class DeviceSecurityStrongVault extends VaultBase {

    protected Cipher masterKeyCipher;
    protected String masterPasscode;

    public DeviceSecurityStrongVault(IdentityVaultConfig config, AppCompatActivity activity) {
        super(config, activity);
    }

    @Override
    protected String getVaultType() {
        return VaultType.DEVICE_SECURITY;
    }

    @Override
    public void clear() throws VaultError {
        super.clear();
        this.masterKeyCipher = null;
    }

    @Override
    public void lock() {
        this.masterKeyCipher = null;
        super.lock();
    }

    @Override
    public void unlock(boolean forceUnlock) throws VaultError {
        if (this.isLocked()) {
            if(this.doesVaultExist() || forceUnlock) {
                if (this.masterKeyCipher == null) {
                    throw new MissingBiometricsError();
                } else {
                    super.unlock(forceUnlock);
                }
            }
        }
    }

    public void setMasterKeyCipher(Cipher cipher) throws VaultError {
        this.masterKeyCipher = cipher;
        String passcode = this.loadMasterPasscode(cipher);
        if (passcode != null) {
            this.masterPasscode = passcode;
        } else {
            String randomPasscode = this.getRandomPasscode();
            this.masterPasscode = randomPasscode;
            this.storeMasterPasscode(randomPasscode);
        }
    }

    public CryptoData getMasterKeyCryptoData() throws VaultError {
        try {
            SharedPreferences pref = this.activity.getSharedPreferences("iv:" + config.key, Context.MODE_PRIVATE);
            String encryptedDataJson = pref.getString("mk", null);
            if (encryptedDataJson == null) {
                return null;
            }
            return CryptoData.create(encryptedDataJson);
        } catch (JSONException e) {
            e.printStackTrace();
            throw new VaultError(e.getLocalizedMessage());
        }
    }

    @Override
    protected void clearStoredData() throws VaultError {
        SharedPreferences pref = this.activity.getSharedPreferences("iv:" + config.key, Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = pref.edit();
        editor.remove("mk");
        editor.apply();
        super.clearStoredData();
    }

    private String loadMasterPasscode(Cipher cipher) throws VaultError {
        try {
            CryptoData cryptoData = this.getMasterKeyCryptoData();

            if (cryptoData == null) {
                return null;
            }

            byte[] decryptedDataBytes = cipher.doFinal(cryptoData.data);

            return new String(decryptedDataBytes, StandardCharsets.UTF_8);
        } catch (Exception e) {
            e.printStackTrace();
            throw new VaultError(e.getLocalizedMessage());
        }
    }

    private String getRandomPasscode() {
        String chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
        int length = 64;
        SecureRandom secureRandom = new SecureRandom();
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            sb.append(chars.charAt(secureRandom.nextInt(chars.length())));
        }
        return sb.toString();
    }

    private void storeMasterPasscode(String passcode) throws VaultError {
        try {
            SharedPreferences pref = this.activity.getSharedPreferences("iv:" + config.key, Context.MODE_PRIVATE);
            SharedPreferences.Editor editor = pref.edit();
            byte[] iv = this.masterKeyCipher.getIV();
            byte[] dataBytes = passcode.getBytes(StandardCharsets.UTF_8);
            byte[] encryptedBytes = this.masterKeyCipher.doFinal(dataBytes);
            CryptoData cryptoData = CryptoData.create(encryptedBytes, iv, new byte[0]);
            editor.putString("mk", cryptoData.toJSON());
            editor.apply();
        } catch (Exception e) {
            e.printStackTrace();
            throw new VaultError(e.getLocalizedMessage());
        }
    }

}
