package com.ionicframework.IdentityVault;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.view.WindowManager;
import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class DevicePlugin extends CordovaPlugin {

    private static final String TAG = "DevicePlugin";
    private static final String ACTION_LOCKOUT_RESET = "com.android.server.fingerprint.ACTION_LOCKOUT_RESET";
    private static Device device;

    private final BroadcastReceiver lockoutReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (ACTION_LOCKOUT_RESET.equals(intent.getAction())) {
                device.clearBiometricsLock();
            }
        }
    };

    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
        device = Device.getInstance();
        cordova.getContext().registerReceiver(lockoutReceiver, new IntentFilter(ACTION_LOCKOUT_RESET), null, null);
    }

    @Override
    public void onPause(boolean multitasking) {
        super.onPause(multitasking);
        if (DevicePlugin.device.isHideScreenOnBackgroundEnabled()) {
            cordova.getActivity().getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
        }
    }

    @Override
    public void onResume(boolean multitasking) {
        super.onResume(multitasking);
        if (!usesGestureNavigation(cordova.getContext())) {
            cordova.getActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);
        } else if (DevicePlugin.device.isHideScreenOnBackgroundEnabled()) {
            cordova.getActivity().getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
        }
    }

    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) {
        switch (action) {
            case "getAvailableHardware":
                getAvailableHardware(args, callbackContext);
                break;
            case "isSystemPasscodeSet":
                isSystemPasscodeSet(args, callbackContext);
                break;
            case "isBiometricsEnabled":
                isBiometricsEnabled(args, callbackContext);
                break;
            case "isBiometricsSupported":
                isBiometricsSupported(args, callbackContext);
                break;
            case "getBiometricStrengthLevel":
                getBiometricStrengthLevel(args, callbackContext);
                break;
            case "isHideScreenOnBackgroundEnabled":
                isHideScreenOnBackgroundEnabled(args, callbackContext);
                break;
            case "setHideScreenOnBackground":
                setHideScreenOnBackground(args, callbackContext);
                break;
            case "isLockedOutOfBiometrics":
                isLockedOutOfBiometrics(args, callbackContext);
                break;
            case "hasSecureHardware":
                hasSecureHardware(args, callbackContext);
                break;
            default:
                break;
        }

        return true;
    }

    private void getAvailableHardware(JSONArray args, CallbackContext callbackContext) {
        JSONArray hardware = device.getAvailableHardware(cordova.getActivity());
        success(callbackContext, hardware);
    }

    private void isLockedOutOfBiometrics(JSONArray args, CallbackContext callbackContext) {
        boolean isLockedOut = device.isLockedOutOfBiometrics();
        success(callbackContext, isLockedOut);
    }

    private void getBiometricStrengthLevel(JSONArray args, CallbackContext callbackContext) {
        String level = device.getBiometricStrengthLevel(cordova.getActivity());
        success(callbackContext, level);
    }

    private void isHideScreenOnBackgroundEnabled(JSONArray args, CallbackContext callbackContext) {
        boolean isEnabled = device.isHideScreenOnBackgroundEnabled();
        success(callbackContext, isEnabled);
    }

    private void hasSecureHardware(JSONArray args, CallbackContext callbackContext) {
        boolean isSecure = device.hasSecureHardware();
        success(callbackContext, isSecure);
    }

    private void setHideScreenOnBackground(JSONArray args, CallbackContext callbackContext) {
        try {
            boolean enabledValue = args.getBoolean(0);
            device.setHideScreenOnBackgroundEnabled(enabledValue);
            success(callbackContext);
        } catch (JSONException ex) {
            error(callbackContext, new DeviceError("could not parse boolean value for 'enabled'"));
        }
    }

    private void isSystemPasscodeSet(JSONArray args, CallbackContext callbackContext) {
        boolean isPasscodeSet = device.isDevicePasscodeSet(cordova.getActivity());
        success(callbackContext, isPasscodeSet);
    }

    private void isBiometricsEnabled(JSONArray args, CallbackContext callbackContext) {
        boolean isEnabled = device.isBiometricsEnabled(cordova.getActivity());
        success(callbackContext, isEnabled);
    }

    private void isBiometricsSupported(JSONArray args, CallbackContext callbackContext) {
        boolean isEnabled = device.isBiometricsSupported(cordova.getActivity());
        success(callbackContext, isEnabled);
    }

    private void success(final CallbackContext callbackContext, boolean val) {
        PluginResult result = new PluginResult(PluginResult.Status.OK, val);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private void success(final CallbackContext callbackContext, String val) {
        PluginResult result = new PluginResult(PluginResult.Status.OK, val);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private void success(final CallbackContext callbackContext, final JSONArray data) {
        JSONArray ret = (data == null) ? new JSONArray() : data;
        PluginResult result = new PluginResult(PluginResult.Status.OK, ret);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private void success(final CallbackContext callbackContext) {
        String nullString = null;
        // NOTE: use null string to get the correct PluginResult call signature
        PluginResult result = new PluginResult(PluginResult.Status.OK, nullString);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private void error(final CallbackContext callbackContext, DeviceError error) {
        JSONObject jsonError = DeviceErrors.toJSON(error);
        error(callbackContext, jsonError);
    }

    private void error(final CallbackContext callbackContext, JSONObject error) {
        PluginResult result = new PluginResult(PluginResult.Status.ERROR, error);
        result.setKeepCallback(false);
        callbackContext.sendPluginResult(result);
    }

    private boolean usesGestureNavigation(Context context) {
        Resources resources = context.getResources();
        int resourceId = resources.getIdentifier("config_navBarInteractionMode", "integer", "android");
        return resourceId > 0 && resources.getInteger(resourceId) == 2;
    }
}
