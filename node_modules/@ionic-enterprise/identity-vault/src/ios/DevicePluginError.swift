import Foundation

public enum DevicePluginError: Error {
    case invalidArguments(_ description: String)
    case unhandledError(_ description: String)
}

public struct DevicePluginErrorObject {
    let code: Int
    let message: String
    init(_ code: Int, _ message: String) {
        self.code = code
        self.message = message
    }

    var asDictionary: [String: Any] {
        return ["code": code, "message": message]
    }
}

public func getDevicePluginErrorObject(_ error: Error) -> DevicePluginErrorObject {
    switch error {
    case DevicePluginError.invalidArguments(let message):
        return DevicePluginErrorObject(1, "Invalid Arguments Provided: " + message)
    case DevicePluginError.unhandledError(let message):
        return DevicePluginErrorObject(0, "Unhandled Error: " + message)
    default:
        return DevicePluginErrorObject(0, "Unhandled Error: " + error.localizedDescription)
    }
}
