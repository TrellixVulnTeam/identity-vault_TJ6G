import { VaultError } from "./definitions";
import { IdentityVaultConfig } from "./IdentityVaultConfig";
export interface VaultInterface {
    config: IdentityVaultConfig;
    doesVaultExist(): Promise<boolean>;
    clear(): Promise<void>;
    exportVault(): Promise<{
        [key: string]: string;
    }>;
    importVault(data: {
        [key: string]: string;
    }): Promise<void>;
    isLocked(): Promise<boolean>;
    getKeys(): Promise<string[]>;
    getValue<T = any>(key: string): Promise<T | null>;
    lock(): Promise<void>;
    removeValue(key: string): Promise<void>;
    setCustomPasscode(passcode: string): Promise<void>;
    setValue<T = any>(key: string, value: T): Promise<void>;
    onConfigChanged(callback: (config: IdentityVaultConfig) => void): void;
    onError(callback: (err: VaultError) => void): void;
    onLock(callback: () => void): void;
    onPasscodeRequested(callback: (isPasscodeSetRequest: boolean) => Promise<void>): void;
    onUnlock(callback: () => void): void;
    unlock(): Promise<void>;
    updateConfig(config: IdentityVaultConfig): Promise<void>;
    requestBiometricPrompt(): Promise<boolean>;
}
