import LocalAuthentication

public class Device {
    public static var isShowingBiometrics: Bool = false
    public var error: NSError?
    private let context = LAContext()
    private var hideScreenOnBackgroundEnabled: Bool = true

    public enum HardwareType: String {
        case fingerprint = "fingerprint"
        case face = "face"
        case none = "none"

        var deprecatedType: String {
            switch self {
            case .fingerprint:
                return "touchID"
            case .face:
                return "faceID"
            case .none:
                return self.rawValue
            }
        }
    }

    public var hideScreenOnBackground: Bool {
        return hideScreenOnBackgroundEnabled
    }

    public func setHideScreenOnBackground(enabled: Bool) {
        hideScreenOnBackgroundEnabled = enabled
    }

    public var isAvailable: Bool {
        return context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error)
    }

    public var isLockedOut: Bool {
        return !isAvailable && error!.code == LAError.biometryLockout.rawValue
    }

    public var isDevicePasscodeSet: Bool {
        return context.canEvaluatePolicy(.deviceOwnerAuthentication, error: &error)
    }

    public var isBiometricsEnabled: Bool {
        return !(!isAvailable && error!.code == LAError.biometryNotEnrolled.rawValue)
    }

    public var isBiometricsSupported: Bool {
        return !(!isAvailable && error!.code == LAError.biometryNotAvailable.rawValue)
    }

    public var hasSecureHardware: Bool {
        let isSimulator = TARGET_OS_SIMULATOR == 1
        return !isSimulator && isAvailable
    }

    public var type: HardwareType {
        if #available(iOS 11.0, *) {
            // biometryType is not set until canEvaluatePolicy is called at least once, so this empty call is required
            _ = isAvailable
            switch context.biometryType {
            case .faceID:
                return .face
            case .touchID:
                return .fingerprint
            case .none:
                return .none
            default:
                return .none
            }
        } else {
            return isAvailable ? .fingerprint : .none
        }
    }
}
